1. How do you find related data held in two separate data tables?

A: By combining them into one table using a JOIN clause.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

A:
INNER JOIN: creates a new table with only the matches of the join clause. Maybe you have a table of customers and a table of invoices tied to customer id
numbers; You could use an inner join here to figure out the names of customers who owe you money.

LEFT OUTER JOIN: creates a new table that includes every entry from the left table as well as all matches from the right table. If there is no matching
data from the right table to use, null is used. You could have a rental car company that uses a car table and a customer table; it could be useful
to perform a left outer join if you wanted to see a list of all cars and whether they are currently rented by a customer or not.

RIGHT OUTER JOIN: the opposite of left outer join; all rows from the table on the right appear in the result as well as all matches. Seems to me to be
applicable to any situation where you would use a left outer join since you can just rearrange the order of the tables.

3. Define primary key and foreign key. Give a real-world example for each.

A:
A primary key is a unique identifier for every row in a table. Social Security Numbers are a good example.
A foreign key is a primary key for one table that presumably has some matches to a primary key of another table. Let's say you were working on an e-commerce project;
you may have a shipping table and a customer info table; the shipping table would contain a column for customer ID# and this would become the foreign key when we
reference it back to the master customer info table which also contains a column for customer ID#.

4. Define aliasing.

A: In this context aliasing is just an abbreviation technique.

5. Change this query so that you are using aliasing:
SELECT professor.name, compensation.salary,
compensation.vacation_days FROM professor JOIN
compensation ON professor.id =
compensation.professor_id;

A: SELECT p.name, c.salary, c.vacation_days
FROM professor as p
JOIN compensation as c
ON p.id = c.professor_id


6. Why would you use a NATURAL JOIN? Give a real-world example.

A: Using a natural join saves us the trouble of typing out all the column names that appear in both tables. This is handy anytime you have many columns
that you want to view between two tables; maybe you only truly need 16 out of the 18 matching columns, it would be a pain to type all 16 out.

7. Using this Employee schema and data, write queries to find the following information:
List all employees and all shifts.

A:
SELECT employees.name, shifts.date, shifts.start_time, shifts.end_time
FROM scheduled_shifts
INNER JOIN employees
ON employees.id = scheduled_shifts.employee_id
INNER JOIN shifts
ON shifts.id = scheduled_shifts.shift_id

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

A:
SELECT volunteers.first_name, volunteers.last_name, dogs.name
FROM volunteers
LEFT OUTER JOIN dogs
on dogs.id = volunteers.foster_dog_id;

first_name	last_name	name
Rubeus	Hagrid	Munchkin
Marjorie	Dursley	Marmaduke
Sirius	Black	null
Remus	Lupin	null
Albus	Dumbledore	null

The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media
promotion which posts recent successful adoptions.

A:
SELECT cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
FROM cat_adoptions
INNER JOIN cats
ON cats.id = cat_adoptions.cat_id
INNER JOIN adopters
ON adopters.id = cat_adoptions.adopter_id
WHERE cat_adoptions.date >= current_date - 30;


name	first_name	last_name	date
Mushi	Arabella	Figg	2018-09-07T00:00:00.000Z
Victoire	Argus	Filch	2018-09-12T00:00:00.000Z

Create a list of adopters who have not yet chosen a dog to adopt.

A:
SELECT first_name, last_name
FROM adopters
LEFT JOIN dog_adoptions
ON dog_adoptions.adopter_id = adopters.id
WHERE dog_adoptions.adopter_id IS NULL;


first_name	last_name
Hermione	Granger
Arabella	Figg

Lists of all cats and all dogs who have not been adopted.

A:
SELECT name
FROM dogs
LEFT JOIN dog_adoptions
ON dogs.id = dog_adoptions.dog_id
WHERE dog_adoptions.dog_id IS NULL;

name
Boujee
Munchkin
Marley
Lassie
Marmaduke

SELECT name
FROM cats
LEFT JOIN cat_adoptions
ON cats.id = cat_adoptions.cat_id
WHERE cat_adoptions.cat_id IS NULL;

name
Seashell
Nala

The name of the person who adopted Rosco.

A:
SELECT first_name, last_name
FROM adopters
INNER JOIN dog_adoptions
ON adopters.id = dog_adoptions.adopter_id
WHERE dog_adoptions.dog_id = 10007;


first_name	last_name
Argus	Filch

9. Using this Library schema and data, write queries applying the following scenarios and include the results:

To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a
hold (request for a book with all copies checked out) on "Advanced Potion-Making".

A:
SELECT patrons.name, holds.rank
FROM holds
INNER JOIN patrons
ON holds.patron_id = patrons.id
WHERE holds.isbn = '9136884926'
ORDER BY holds.rank ASC;

name	rank
Terry Boot	1
Cedric Diggory	2

List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

A: I found this solution online after toying with this for a while; it gets the job done but I suspect that there is a maybe a simpler/more elegant way to
accomplish this.

SELECT patrons.name,
MAX((CASE WHEN books.title IN (SELECT title FROM books WHERE transactions.checked_in_date IS NULL) THEN books.title ELSE NULL END))
FROM patrons
INNER JOIN transactions ON transactions.patron_id = patrons.id
INNER JOIN books ON books.isbn = transactions.isbn
GROUP BY patrons.name;

name	max
Cedric Diggory	Fantastic Beasts and Where to Find Them
Cho Chang	null
Hermione Granger	null
Padma Patil	null
Terry Boot	Advanced Potion-Making
